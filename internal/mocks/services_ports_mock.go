// Code generated by MockGen. DO NOT EDIT.
// Source: services_ports.go

// Package mocks is a generated GoMock package.
package mocks

import (
	image "image"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCheckBoxDetector is a mock of CheckBoxDetector interface.
type MockCheckBoxDetector struct {
	ctrl     *gomock.Controller
	recorder *MockCheckBoxDetectorMockRecorder
}

// MockCheckBoxDetectorMockRecorder is the mock recorder for MockCheckBoxDetector.
type MockCheckBoxDetectorMockRecorder struct {
	mock *MockCheckBoxDetector
}

// NewMockCheckBoxDetector creates a new mock instance.
func NewMockCheckBoxDetector(ctrl *gomock.Controller) *MockCheckBoxDetector {
	mock := &MockCheckBoxDetector{ctrl: ctrl}
	mock.recorder = &MockCheckBoxDetectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckBoxDetector) EXPECT() *MockCheckBoxDetectorMockRecorder {
	return m.recorder
}

// Detect mocks base method.
func (m *MockCheckBoxDetector) Detect() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detect")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Detect indicates an expected call of Detect.
func (mr *MockCheckBoxDetectorMockRecorder) Detect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detect", reflect.TypeOf((*MockCheckBoxDetector)(nil).Detect))
}

// MockImageGetter is a mock of ImageGetter interface.
type MockImageGetter struct {
	ctrl     *gomock.Controller
	recorder *MockImageGetterMockRecorder
}

// MockImageGetterMockRecorder is the mock recorder for MockImageGetter.
type MockImageGetterMockRecorder struct {
	mock *MockImageGetter
}

// NewMockImageGetter creates a new mock instance.
func NewMockImageGetter(ctrl *gomock.Controller) *MockImageGetter {
	mock := &MockImageGetter{ctrl: ctrl}
	mock.recorder = &MockImageGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageGetter) EXPECT() *MockImageGetterMockRecorder {
	return m.recorder
}

// GetImage mocks base method.
func (m *MockImageGetter) GetImage(path string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", path)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockImageGetterMockRecorder) GetImage(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockImageGetter)(nil).GetImage), path)
}

// MockImageDecoder is a mock of ImageDecoder interface.
type MockImageDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockImageDecoderMockRecorder
}

// MockImageDecoderMockRecorder is the mock recorder for MockImageDecoder.
type MockImageDecoderMockRecorder struct {
	mock *MockImageDecoder
}

// NewMockImageDecoder creates a new mock instance.
func NewMockImageDecoder(ctrl *gomock.Controller) *MockImageDecoder {
	mock := &MockImageDecoder{ctrl: ctrl}
	mock.recorder = &MockImageDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageDecoder) EXPECT() *MockImageDecoderMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockImageDecoder) Decode(reader io.Reader) (image.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", reader)
	ret0, _ := ret[0].(image.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockImageDecoderMockRecorder) Decode(reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockImageDecoder)(nil).Decode), reader)
}

// MockImageGrayer is a mock of ImageGrayer interface.
type MockImageGrayer struct {
	ctrl     *gomock.Controller
	recorder *MockImageGrayerMockRecorder
}

// MockImageGrayerMockRecorder is the mock recorder for MockImageGrayer.
type MockImageGrayerMockRecorder struct {
	mock *MockImageGrayer
}

// NewMockImageGrayer creates a new mock instance.
func NewMockImageGrayer(ctrl *gomock.Controller) *MockImageGrayer {
	mock := &MockImageGrayer{ctrl: ctrl}
	mock.recorder = &MockImageGrayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageGrayer) EXPECT() *MockImageGrayerMockRecorder {
	return m.recorder
}

// ToGray mocks base method.
func (m *MockImageGrayer) ToGray(img image.Image) *image.Gray {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToGray", img)
	ret0, _ := ret[0].(*image.Gray)
	return ret0
}

// ToGray indicates an expected call of ToGray.
func (mr *MockImageGrayerMockRecorder) ToGray(img interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToGray", reflect.TypeOf((*MockImageGrayer)(nil).ToGray), img)
}

// MockImagePixelHandler is a mock of ImagePixelHandler interface.
type MockImagePixelHandler struct {
	ctrl     *gomock.Controller
	recorder *MockImagePixelHandlerMockRecorder
}

// MockImagePixelHandlerMockRecorder is the mock recorder for MockImagePixelHandler.
type MockImagePixelHandlerMockRecorder struct {
	mock *MockImagePixelHandler
}

// NewMockImagePixelHandler creates a new mock instance.
func NewMockImagePixelHandler(ctrl *gomock.Controller) *MockImagePixelHandler {
	mock := &MockImagePixelHandler{ctrl: ctrl}
	mock.recorder = &MockImagePixelHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImagePixelHandler) EXPECT() *MockImagePixelHandlerMockRecorder {
	return m.recorder
}

// Dilate mocks base method.
func (m *MockImagePixelHandler) Dilate(grayImg image.Gray, iterations int) *image.Gray {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dilate", grayImg, iterations)
	ret0, _ := ret[0].(*image.Gray)
	return ret0
}

// Dilate indicates an expected call of Dilate.
func (mr *MockImagePixelHandlerMockRecorder) Dilate(grayImg, iterations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dilate", reflect.TypeOf((*MockImagePixelHandler)(nil).Dilate), grayImg, iterations)
}

// MockImageBinarizer is a mock of ImageBinarizer interface.
type MockImageBinarizer struct {
	ctrl     *gomock.Controller
	recorder *MockImageBinarizerMockRecorder
}

// MockImageBinarizerMockRecorder is the mock recorder for MockImageBinarizer.
type MockImageBinarizerMockRecorder struct {
	mock *MockImageBinarizer
}

// NewMockImageBinarizer creates a new mock instance.
func NewMockImageBinarizer(ctrl *gomock.Controller) *MockImageBinarizer {
	mock := &MockImageBinarizer{ctrl: ctrl}
	mock.recorder = &MockImageBinarizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageBinarizer) EXPECT() *MockImageBinarizerMockRecorder {
	return m.recorder
}

// ApplyWithAdaptiveThreshold mocks base method.
func (m *MockImageBinarizer) ApplyWithAdaptiveThreshold(img *image.Gray, blockSize, fineAdjustment int) *image.Gray {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyWithAdaptiveThreshold", img, blockSize, fineAdjustment)
	ret0, _ := ret[0].(*image.Gray)
	return ret0
}

// ApplyWithAdaptiveThreshold indicates an expected call of ApplyWithAdaptiveThreshold.
func (mr *MockImageBinarizerMockRecorder) ApplyWithAdaptiveThreshold(img, blockSize, fineAdjustment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyWithAdaptiveThreshold", reflect.TypeOf((*MockImageBinarizer)(nil).ApplyWithAdaptiveThreshold), img, blockSize, fineAdjustment)
}
